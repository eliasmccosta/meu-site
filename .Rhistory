blogdown::hugo_build(local=TRUE)
blogdown::hugo_build(local=TRUE)
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::stop_server()
blogdown::serve_site()
blogdown:::new_post_addin()
blogdown::stop_server()
blogdown:::new_post_addin()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown:::new_post_addin()
blogdown::stop_server()
blogdown::serve_site()
rm()
blogdown:::preview_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::hugo_version()
blogdown::hugo_version()
blogdown::serve_site()
blogdown::install_hugo("0.101.0")
blogdown::serve_site()
# Instalar pacotes se necessário
if (!requireNamespace("rayshader", quietly = TRUE)) install.packages("rayshader")
if (!requireNamespace("raster", quietly = TRUE)) install.packages("raster")
# Carregar pacotes
library(rayshader)
library(raster)
# Carregar um exemplo de dados de elevação ou o seu próprio arquivo de elevação do Brasil
# Para este exemplo, usaremos o volcão Maunga Whau (Monte Eden) em Auckland
data("volcano")
elevation_matrix <- matrix(volcano, ncol = ncol(volcano), nrow = nrow(volcano))
# Transformar a matriz de elevação em uma imagem 3D
elevation_matrix %>%
sphere_shade(texture = "imhof1") %>%
plot_3d(elevation_matrix, zscale = 0.1, fov = 0, theta = 0, phi = 45, windowsize = c(800, 800))
# Abre a janela de visualização interativa
rgl::rglwidget()
#############################################
# 3D forest map with R
# Milos Popovic 2023/04/25
#############################################
setwd() # please set path to your working directory
install.packages("remotes")
remotes::install_github("tylermorganwall/rayshader")
installed_libraries <- libs %in% rownames(installed.packages())
if (any(installed_libraries == F)){
install.packages(libs[!installed_libraries])
}
invisible(lapply(libs, library, character.only = T))
crsLONGLAT <- "+proj=longlat +datum=WGS84 +no_defs"
get_country_borders <- function() {
country_borders <- giscoR::gisco_get_countries(
resolution = "10",
country = "SE"
)
return(country_borders)
}
country_borders <- get_country_borders() |>
sf::st_transform(crsLONGLAT)
install.packages("giscoR")
country_borders <- giscoR::gisco_get_countries(
resolution = "10",
country = "SE"
)
return(country_borders)
crsLONGLAT <- "+proj=longlat +datum=WGS84 +no_defs"
get_country_borders <- function() {
country_borders <- giscoR::gisco_get_countries(
resolution = "10",
country = "SE"
)
return(country_borders)
}
country_borders <- get_country_borders() |>
sf::st_transform(crsLONGLAT)
plot(sf::st_geometry(country_borders))
"https://s3-eu-west-1.amazonaws.com/vito.landcover.global/v3.0.1/2019/E000N60/E000N60_PROBAV_LC100_global_v3.0.1_2019-nrt_Tree-CoverFraction-layer_EPSG-4326.tif"
start_url <- "https://s3-eu-west-1.amazonaws.com/vito.landcover.global/v3.0.1/2019/"
var_url <- c("E000N60/E000N60", "E000N80/E000N80", "E020N80/E020N80")
end <- "_PROBAV_LC100_global_v3.0.1_2019-nrt_Tree-CoverFraction-layer_EPSG-4326.tif"
urls <- paste0(start_url, var_url, end)
for (url in urls) {
download.file(url, destfile = basename(url), mode = "wb")
}
# 4. CROP RASTER
#---------------
get_forest_cover_cropped <- function() {
country_borders_vect <- terra::vect(
country_borders
)
forest_cover_cropped <- terra::crop(
forest_cover_mosaic, country_borders_vect,
snap = "in", mask = T
)
return(forest_cover_cropped)
}
forest_cover_cropped <- get_forest_cover_cropped() |>
terra::aggregate(fact = 2) # please increase if R throws  the memory error below
plot(forest_cover_mosaic)
install.packages(?"blogdown")
install.packages("blogdown")
blogdown::serve_site()
blogdown::serve_site()
install.packages("blogdown")
install.packages("blogdown")
blogdown::serve_site()
blogdown::serve_site()0
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
